#!/usr/bin/env python
# -*- coding: utf-8 -*-

from sqlalchemy import Column, Integer, String, Date, ForeignKey
from sqlalchemy.orm import relationship
from sqlalchemy.ext.declarative.api import declarative_base

Base = declarative_base()


class BenignProgram(Base):

    """A BegignProgram will bypass sniffer and will never be detected"""

    __tablename__ = 'benign_program'

    id = Column(Integer, primary_key=True)
    exe = Column(String(128), unique=True, nullable=False)
    added_at = Column(Date)

    false_alarms = relationship('RansomEvent', backref='benign_program',
                                lazy='dynamic')


class RansomEvent(Base):

    """A RansomEvent records alarms generated by the engine. Could be a
    false positive, which requires user interactions/feedback to eliminate."""

    __tablename__ = 'ransom_event'

    id = Column(Integer, primary_key=True)
    exe = Column(String(128), unique=True, nullable=False)
    cmdline = Column(String(4096), unique=True, nullable=False)
    pid = Column(Integer, nullable=False)
    found_at = Column(Date, nullable=False)

    # in case this is a false alarm: create a BenignProgram and associate this
    # event with the benign program (to indicate this as a false alarm)
    benign_program_id = Column(Integer)

    victim_files = relationship('VictimFile', backref='event',
                                lazy='dynamic')


class VictimFile(Base):

    """A VictimFile is a file that suffered from a RansomEvent"""

    __tablename__ = 'victim_file'

    id = Column(Integer, primary_key=True)
    path = Column(String(1024), nullable=False)
    event_id = Column(Integer, ForeignKey('ransom_event.id'))
